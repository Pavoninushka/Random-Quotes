{"version":3,"sources":["App.js","index.js"],"names":["SAVE_QUOTES","SET_CURRENT_QUOTE","initialState","quotes","currentQuote","quote","author","store","Redux","state","action","type","App","props","getNewQuote","bind","fetch","then","response","json","data","saveQuotes","this","length","randomQuote","Math","floor","random","setCurrentQuote","className","id","title","target","href","encodeURIComponent","onClick","React","Component","Quote","Provider","ReactRedux","ConnectedApp","connect","dispatch","AppWrapper","ReactDOM","render","document","getElementById"],"mappings":"sPAKMA,EAAc,cACdC,EAAoB,oBAgBpBC,EAAe,CACnBC,OAAQ,GACRC,aAAc,CACZC,MAAO,0BACPC,OAAQ,qBAqBNC,EAAQC,KAjBQ,WAAmC,IAAlCC,EAAiC,uDAAzBP,EAAcQ,EAAW,uCACtD,OAAQA,EAAOC,MACb,KAAKX,EACH,MAAO,CACLG,OAAQO,EAAOP,OACfC,aAAcK,EAAML,cAExB,KAAKH,EACH,MAAO,CACLE,OAAQM,EAAMN,OACdC,aAAcM,EAAOL,OAEzB,QACE,OAAOI,MAMPG,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,YAAc,EAAKA,YAAYC,KAAjB,gBAFF,E,qDAKnB,WAAqB,IAAD,OAClBC,MAAM,0IACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIA,EAAKjB,UAClBc,MAAK,SAAAd,GAAM,OAAI,EAAKU,MAAMQ,WAAWlB,Q,yBAG1C,WACE,IAAIA,EAASmB,KAAKT,MAAMV,OACxB,GAAsB,IAAlBA,EAAOoB,OAAc,CACvB,IACIC,EAAcrB,EADCsB,KAAKC,MAAMD,KAAKE,SAAWxB,EAAOoB,SAErDD,KAAKT,MAAMe,gBAAgBJ,M,oBAI/B,WACE,OACE,qBAAKK,UAAU,yDAAf,SACE,sBAAKC,GAAG,OAAOD,UAAU,aAAzB,UACE,oBAAIA,UAAU,wBAAwBC,GAAG,UAAzC,uCAGA,sBAAKA,GAAG,YAAYD,UAAU,cAA9B,UACE,cAAC,EAAD,CAAOzB,aAAckB,KAAKT,MAAMT,eAChC,sBAAKyB,UAAU,MAAf,UACE,qBAAKA,UAAU,kBAAf,SACE,mBACEA,UAAU,eACVC,GAAG,cACHC,MAAM,WACNC,OAAO,SACPC,KAAM,yCAA2CC,mBAAmB,IAAMZ,KAAKT,MAAMT,aAAaC,MAAQ,KAAOiB,KAAKT,MAAMT,aAAaE,QAL3I,SAOE,mBAAGuB,UAAU,sBAIjB,qBAAKA,UAAU,8BAAf,SACE,wBACEA,UAAU,eACVC,GAAG,YACHK,QAASb,KAAKR,YAHhB,wC,GA7CEsB,IAAMC,WA6DlBC,E,kDACJ,WAAYzB,GAAQ,uCACZA,G,0CAGR,WACE,OACE,gCACE,sBAAKgB,UAAU,aAAf,UACE,mBAAGA,UAAU,qBACb,sBAAMC,GAAG,OAAT,SAAiBR,KAAKT,MAAMT,aAAaC,QACzC,mBAAGwB,UAAU,yBAEf,qBAAKA,UAAU,eAAf,SACE,uBAAMC,GAAG,SAAT,eAAqBR,KAAKT,MAAMT,aAAaE,mB,GAdnC8B,IAAMC,WAqBpBE,EAAWC,IAqBXC,GAAeC,EADLF,MAlBQ,SAAC/B,GACvB,MAAO,CACLN,OAAQM,EAAMN,OACdC,aAAcK,EAAML,iBAIG,SAACuC,GAC1B,MAAO,CACLtB,WAAY,SAAUlB,GACpBwC,EAvIa,SAACxC,GAClB,MAAO,CACLQ,KAAMX,EACNG,OAAQA,GAoIGkB,CAAWlB,KAEtByB,gBAAiB,SAAUvB,GACzBsC,EAnIkB,SAACtC,GACvB,MAAO,CACLM,KAAMV,EACNI,MAAOA,GAgIIuB,CAAgBvB,QAMVqC,CAA6C9B,GAYnDgC,E,4JATb,WACE,OACE,cAACL,EAAD,CAAUhC,MAAOA,EAAjB,SACE,cAACkC,EAAD,U,GAJiBL,IAAMC,W,YCrJ/BQ,IAASC,OAAO,cAAC,EAAD,IAAgBC,SAASC,eAAe,U","file":"static/js/main.e19c4cb3.chunk.js","sourcesContent":["import './App.css';\nimport React from 'react';\nimport * as ReactRedux from 'react-redux';\nimport * as Redux from 'redux';\n\nconst SAVE_QUOTES = \"SAVE_QUOTES\";\nconst SET_CURRENT_QUOTE = \"SET_CURRENT_QUOTE\";\n\nconst saveQuotes = (quotes) => {\n  return {\n    type: SAVE_QUOTES,\n    quotes: quotes\n  };\n};\n\nconst setCurrentQuote = (quote) => {\n  return {\n    type: SET_CURRENT_QUOTE,\n    quote: quote\n  };\n};\n\nconst initialState = {\n  quotes: [],\n  currentQuote: {\n    quote: \"Be unique, this matters\",\n    author: \"Galina Karateeva\"\n  }\n};\n\nconst quotesReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SAVE_QUOTES:\n      return {\n        quotes: action.quotes,\n        currentQuote: state.currentQuote\n      };\n    case SET_CURRENT_QUOTE:\n      return {\n        quotes: state.quotes,\n        currentQuote: action.quote\n      };\n    default:\n      return state;\n  }\n};\n\nconst store = Redux.createStore(quotesReducer);\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.getNewQuote = this.getNewQuote.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\")\n      .then(response => response.json())\n      .then(data => data.quotes)\n      .then(quotes => this.props.saveQuotes(quotes));\n  }\n\n  getNewQuote() {\n    let quotes = this.props.quotes;\n    if (quotes.length !== 0) {\n      let randomNumber = Math.floor(Math.random() * quotes.length);\n      let randomQuote = quotes[randomNumber];\n      this.props.setCurrentQuote(randomQuote);\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"d-flex justify-content-center align-items-center h-100\">\n        <div id=\"main\" className=\"border p-3\">\n          <h1 className=\"text-info text-center\" id=\"heading\">\n            Here is your daily quote:\n          </h1>\n          <div id=\"quote-box\" className=\"text-center\">\n            <Quote currentQuote={this.props.currentQuote}/>\n            <div className=\"row\">\n              <div className=\"col-md-1 button\">\n                <a\n                  className=\"btn btn-info\"\n                  id=\"tweet-quote\"\n                  title=\"Twit it!\"\n                  target=\"_blank\"\n                  href={\"https://twitter.com/intent/tweet?text=\" + encodeURIComponent('\"' + this.props.currentQuote.quote + '\" ' + this.props.currentQuote.author)}\n                >\n                  <i className=\"fa fa-twitter\"/>\n                </a>\n              </div>\n\n              <div className=\"col-md-10 text-right button\">\n                <button\n                  className=\"btn btn-info\"\n                  id=\"new-quote\"\n                  onClick={this.getNewQuote}\n                >\n                  New Quote\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Quote extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"quote-text\">\n          <i className=\"fa fa-quote-left\"/>\n          <span id=\"text\">{this.props.currentQuote.quote}</span>\n          <i className=\"fa fa-quote-right\"/>\n        </div>\n        <div className=\"quote-author\">\n          <span id=\"author\">- {this.props.currentQuote.author}</span>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst Provider = ReactRedux.Provider;\n\nconst mapStateToProps = (state) => {\n  return {\n    quotes: state.quotes,\n    currentQuote: state.currentQuote\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    saveQuotes: function (quotes) {\n      dispatch(saveQuotes(quotes));\n    },\n    setCurrentQuote: function (quote) {\n      dispatch(setCurrentQuote(quote))\n    }\n  };\n};\n\nconst connect = ReactRedux.connect;\nconst ConnectedApp = connect(mapStateToProps, mapDispatchToProps)(App);\n\nclass AppWrapper extends React.Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <ConnectedApp/>\n      </Provider>\n    );\n  }\n}\n\nexport default AppWrapper;\n","import ReactDOM from 'react-dom';\nimport AppWrapper from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'font-awesome/css/font-awesome.css';\n\nReactDOM.render(<AppWrapper />, document.getElementById(\"app\"));\n"],"sourceRoot":""}