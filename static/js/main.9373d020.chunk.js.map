{"version":3,"sources":["App.js","index.js"],"names":["SAVE_QUOTES","SET_CURRENT_QUOTE","store","Redux","state","action","type","quotes","currentQuote","quote","author","App","props","getNewQuote","bind","$","ajax","headers","Accept","url","success","jsonQuotes","JSON","parse","saveQuotes","this","length","randomQuote","Math","floor","random","setCurrentQuote","className","id","title","target","href","encodeURIComponent","onClick","React","Component","Quote","Provider","ReactRedux","ConnectedApp","connect","dispatch","AppWrapper","ReactDOM","render","document","getElementById"],"mappings":"uQAMMA,EAAc,cACdC,EAAoB,oBAsCpBC,EAAQC,KAvBQ,SAACC,EAAOC,GAC5B,OAAQA,EAAOC,MACb,KAAKN,EACH,MAAO,CACLO,OAAQF,EAAOE,OACfC,aAAcJ,EAAMI,cAExB,KAAKP,EACH,MAAO,CACLM,OAAQH,EAAMG,OACdC,aAAcH,EAAOI,OAEzB,QACE,MAAO,CACLF,OAAQ,GACRC,aAAc,CACZC,MAAO,0BACPC,OAAQ,yBAQZC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,YAAc,EAAKA,YAAYC,KAAjB,gBAFF,E,qDAKnB,WAAqB,IAAD,OAClBC,IAAEC,KAAK,CACLC,QAAS,CACPC,OAAQ,oBAEVC,IACI,yIACJC,QAAS,SAACC,GACR,IAAId,EAASe,KAAKC,MAAMF,GAAYd,OACpC,EAAKK,MAAMY,WAAWjB,Q,yBAK5B,WACE,IAAIA,EAASkB,KAAKb,MAAML,OACxB,GAAsB,IAAlBA,EAAOmB,OAAc,CACvB,IACIC,EAAcpB,EADCqB,KAAKC,MAAMD,KAAKE,SAAWvB,EAAOmB,SAErDD,KAAKb,MAAMmB,gBAAgBJ,M,oBAI/B,WACE,OACI,qBAAKK,UAAU,yDAAf,SACE,sBAAKC,GAAG,OAAOD,UAAU,aAAzB,UACE,oBAAIA,UAAU,wBAAwBC,GAAG,UAAzC,uCAGA,sBAAKA,GAAG,YAAYD,UAAU,cAA9B,UACE,cAAC,EAAD,CAAOxB,aAAciB,KAAKb,MAAMJ,eAChC,sBAAKwB,UAAU,MAAf,UACE,qBAAKA,UAAU,kBAAf,SACE,mBACIA,UAAU,eACVC,GAAG,cACHC,MAAM,WACNC,OAAO,SACPC,KAAM,yCAA2CC,mBAAmB,IAAMZ,KAAKb,MAAMJ,aAAaC,MAAQ,KAAOgB,KAAKb,MAAMJ,aAAaE,QAL7I,SAOE,mBAAGsB,UAAU,sBAIjB,qBAAKA,UAAU,8BAAf,SACE,wBACIA,UAAU,eACVC,GAAG,YACHK,QAASb,KAAKZ,YAHlB,wC,GApDA0B,IAAMC,WAoElBC,E,kDACJ,WAAY7B,GAAQ,uCACZA,G,0CAGR,WACE,OACI,gCACE,sBAAKoB,UAAU,aAAf,UACE,mBAAGA,UAAU,qBACb,sBAAMC,GAAG,OAAT,SAAiBR,KAAKb,MAAMJ,aAAaC,QACzC,mBAAGuB,UAAU,yBAEf,qBAAKA,UAAU,eAAf,SACE,uBAAMC,GAAG,SAAT,eAAqBR,KAAKb,MAAMJ,aAAaE,mB,GAdrC6B,IAAMC,WAqBpBE,EAAWC,IAqBXC,GAAeC,EADLF,MAlBQ,SAACvC,GACvB,MAAO,CACLG,OAAQH,EAAMG,OACdC,aAAcJ,EAAMI,iBAIG,SAACsC,GAC1B,MAAO,CACLtB,WAAY,SAASjB,GACnBuC,EA3Ia,SAACvC,GAClB,MAAO,CACLD,KAAMN,EACNO,OAAQA,GAwIGiB,CAAWjB,KAEtBwB,gBAAiB,SAAStB,GACxBqC,EAvIkB,SAACrC,GACvB,MAAO,CACLH,KAAML,EACNQ,MAAOA,GAoIIsB,CAAgBtB,QAMVoC,CAA6ClC,GAYnDoC,E,4JATb,WACE,OACI,cAACL,EAAD,CAAUxC,MAAOA,EAAjB,SACE,cAAC0C,EAAD,U,GAJeL,IAAMC,W,YC1J/BQ,IAASC,OAAO,cAAC,EAAD,IAAgBC,SAASC,eAAe,U","file":"static/js/main.9373d020.chunk.js","sourcesContent":["import './App.css';\nimport React from 'react';\nimport * as ReactRedux from 'react-redux';\nimport * as Redux from 'redux';\nimport $ from 'jquery';\n\nconst SAVE_QUOTES = \"SAVE_QUOTES\";\nconst SET_CURRENT_QUOTE = \"SET_CURRENT_QUOTE\";\n\nconst saveQuotes = (quotes) => {\n  return {\n    type: SAVE_QUOTES,\n    quotes: quotes\n  };\n};\n\nconst setCurrentQuote = (quote) => {\n  return {\n    type: SET_CURRENT_QUOTE,\n    quote: quote\n  };\n};\nconst quotesReducer = (state, action) => {\n  switch (action.type) {\n    case SAVE_QUOTES:\n      return {\n        quotes: action.quotes,\n        currentQuote: state.currentQuote\n      };\n    case SET_CURRENT_QUOTE:\n      return {\n        quotes: state.quotes,\n        currentQuote: action.quote\n      };\n    default:\n      return {\n        quotes: [],\n        currentQuote: {\n          quote: \"Be unique, this matters\",\n          author: \"Galina Karateeva\"\n        }\n      };\n  }\n};\n\nconst store = Redux.createStore(quotesReducer);\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.getNewQuote = this.getNewQuote.bind(this);\n  }\n\n  componentDidMount() {\n    $.ajax({\n      headers: {\n        Accept: \"application/json\"\n      },\n      url:\n          \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\",\n      success: (jsonQuotes) => {\n        let quotes = JSON.parse(jsonQuotes).quotes;\n        this.props.saveQuotes(quotes);\n      }\n    });\n  }\n\n  getNewQuote() {\n    let quotes = this.props.quotes;\n    if (quotes.length !== 0) {\n      let randomNumber = Math.floor(Math.random() * quotes.length);\n      let randomQuote = quotes[randomNumber];\n      this.props.setCurrentQuote(randomQuote);\n    }\n  }\n\n  render() {\n    return (\n        <div className=\"d-flex justify-content-center align-items-center h-100\">\n          <div id=\"main\" className=\"border p-3\">\n            <h1 className=\"text-info text-center\" id=\"heading\">\n              Here is your daily quote:\n            </h1>\n            <div id=\"quote-box\" className=\"text-center\">\n              <Quote currentQuote={this.props.currentQuote} />\n              <div className=\"row\">\n                <div className=\"col-md-1 button\">\n                  <a\n                      className=\"btn btn-info\"\n                      id=\"tweet-quote\"\n                      title=\"Twit it!\"\n                      target=\"_blank\"\n                      href={\"https://twitter.com/intent/tweet?text=\" + encodeURIComponent('\"' + this.props.currentQuote.quote + '\" ' + this.props.currentQuote.author)}\n                  >\n                    <i className=\"fa fa-twitter\"/>\n                  </a>\n                </div>\n\n                <div className=\"col-md-10 text-right button\">\n                  <button\n                      className=\"btn btn-info\"\n                      id=\"new-quote\"\n                      onClick={this.getNewQuote}\n                  >\n                    New Quote\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n    );\n  }\n}\n\nclass Quote extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n        <div>\n          <div className=\"quote-text\">\n            <i className=\"fa fa-quote-left\"/>\n            <span id=\"text\">{this.props.currentQuote.quote}</span>\n            <i className=\"fa fa-quote-right\"/>\n          </div>\n          <div className=\"quote-author\">\n            <span id=\"author\">- {this.props.currentQuote.author}</span>\n          </div>\n        </div>\n    );\n  }\n}\n\nconst Provider = ReactRedux.Provider;\n\nconst mapStateToProps = (state) => {\n  return {\n    quotes: state.quotes,\n    currentQuote: state.currentQuote\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    saveQuotes: function(quotes) {\n      dispatch(saveQuotes(quotes));\n    },\n    setCurrentQuote: function(quote) {\n      dispatch(setCurrentQuote(quote))\n    }\n  };\n};\n\nconst connect = ReactRedux.connect;\nconst ConnectedApp = connect(mapStateToProps, mapDispatchToProps)(App);\n\nclass AppWrapper extends React.Component {\n  render() {\n    return (\n        <Provider store={store}>\n          <ConnectedApp />\n        </Provider>\n    );\n  }\n}\n\nexport default AppWrapper;\n","import ReactDOM from 'react-dom';\nimport AppWrapper from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'font-awesome/css/font-awesome.css';\n\nReactDOM.render(<AppWrapper />, document.getElementById(\"app\"));\n// https://github.com/yusufipk/quote-machine\n\n\n\n\n\n\n\n\n\n//  main:    X - X - O - C - D - E\n//                    \\     /\n// feature:            A - B\n// gh-pages:\n// https://username.github.io/repository-name/"],"sourceRoot":""}